scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils
library NonfungibleToken

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let zero = Uint256 0
let one = Uint256 1

let addOwnerCount = 
  fun (someCurrentCount: Option Uint256) =>
    match someCurrentCount with
    | Some currentCount =>
      builtin add currentCount one
    | None => one
    end

let subOwnerCount = 
fun (someCurrentCount: Option Uint256) =>
  match someCurrentCount with
  | Some currentCount =>
    let is_zero = builtin eq currentCount zero in
    match is_zero with
    | True => None { Uint256 }
    | False => 
      let new_count = builtin sub currentCount one in
      Some { Uint256 } new_count
    end
  | None => None { Uint256 }
  end

(* Check if a sender is an operator of the owner, approved for the given ID *)
(* or is the owner of the token                                             *)
let isApprovedOrOwner =
  fun (isOwner: Bool) =>
  fun (isApproved: Bool) =>
  fun (isApprovedForAll: Bool) =>
    let isOwnerOrApproved =  orb isOwner isApproved in
    orb isOwnerOrApproved isApprovedForAll

(* Error events *)
type Error =
  | CodeNotAuthorised
  | CodeNotFound
  | CodeTokenExists
  | CodeUnexpectedError

let makeErrorEvent =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeNotAuthorised    => Int32 -1
      | CodeNotFound         => Int32 -2
      | CodeTokenExists      => Int32 -3
      | CodeUnexpectedError  => Int32 -4
      end
    in
    { _eventname : "Error"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract NonfungibleToken
(contractOwner: ByStr20,
  name : String,
  symbol: String
)

(* Mutable fields *)

(* Mapping between tokenId to token owner *)
field tokenOwners: Map Uint256 ByStr20 = Emp Uint256 ByStr20

(* Mapping from owner to number of owned tokens *)
(* field ownedTokenCount: Map ByStr20 Uint256 = Emp ByStr20 Uint256 *)

(* Mapping between tokenId to approved address *)
(* @dev: There can only be one approved address per token at any given time. *)
field tokenApprovals: Map Uint256 ByStr20 = Emp Uint256 ByStr20

(* Mapping from owner to operator approvals  *)
field operatorApprovals: Map ByStr20 (Map ByStr20 Bool)
                            = Emp ByStr20 (Map ByStr20 Bool)

(* Emit Errors *)
procedure MakeError(err : Error)
  e = makeErrorEvent err;
  event e
end

(* @dev:    Mint new tokens. Only contractOwner can mint. *)
(* @param:  to      - Address of the token recipient      *)
(* @param:  tokenId - ID of the new token minted          *)
(* Returns error message CodeTokenExists if token exists. *)
(* Revert transition if invalid recipient contract.       *)
transition mint(to: ByStr20, tokenId: Uint256)
  (* Check if token exists *)
  tokenExist <- exists tokenOwners[tokenId];
  match tokenExist with
  | True =>
    (* Token exists, return error code *)
    err = CodeTokenExists;
    MakeError err
  | False =>
    (* Check if sender is contractOwner *)
    isContractOwner = builtin eq _sender contractOwner;
    match isContractOwner with
    | True =>
      (* Mint new token *)
      tokenOwners[tokenId] := to;
      (* Add to owner's count *)
      (* someCurrentCount <- ownedTokenCount[to];
      newCount = addOwnerCount someCurrentCount;
      ownedTokenCount[to] := newCount; *)
      (* Emit success event *)
      e = {_eventname: "MintSuccess"; by: _sender; recipient: to; token: tokenId};
      event e;
      (* Send dummy callback message.                                                *)
      (* Revert transition if invalid recipient contract. Ignore if external address *)
      msg = { _tag : "transferCallBack"; _recipient : to; _amount : Uint128 0 };
      msgs = one_msg msg;
      send msgs
    | False =>
      (* Unauthorised transaction*)
      err = CodeNotAuthorised;
      MakeError err
    end
  end
end

(* @dev:    Burn existing tokens. Only tokenOwner or approved operator can burn a token *)
(* @param:  tokenId - ID of the new token destroyed                                     *)
(* Returns error message CodeNotFound if token does not exists                          *)
transition burn(tokenId: Uint256)
  (* Check if token exists *)
  getTokenOwner <- tokenOwners[tokenId];
  match getTokenOwner with
  | None =>
    (* Token do not exist, return error code *)
    err = CodeNotFound;
    MakeError err
  | Some tokenOwner =>
    (* Check if sender is tokenOwner *)
    isOwner = builtin eq _sender tokenOwner;
    (* Check if sender is tokenOwner approvedForAll operator *)
    getOperator <- operatorApprovals[tokenOwner][_sender];
    isApprovedForAll = match getOperator with
      | None => False
      | Some val => val
      end;
    (* Check if sender is an authorised *)
    isAuthorised = orb isOwner isApprovedForAll;
    match isAuthorised with
    | False =>
      (* Unauthorised transaction *)
      err = CodeNotAuthorised;
      MakeError err
    | True =>
      (* Destroy existing token *)
      delete tokenOwners[tokenId];
      delete tokenApprovals[tokenId];
      e = {_eventname: "BurnSuccess"; by: _sender; token: tokenId};
      event e
    end
  end
end

(* @dev: Transfer the ownership of a given tokenId to another address *)
(* @param: to      - Recipient address for the token                  *)
(* @param: tokenId - ID of the token to be transferred                *)
(* Returns error message CodeNotFound if token does not exists        *)
(* Revert transition if invalid recipient contract.                   *)
transition transfer(tokenOwner: ByStr20, to: ByStr20, tokenId: Uint256)
  (* Check if token exists *)
  getTokenOwner <- tokenOwners[tokenId];
  match getTokenOwner with
  | None =>
    (* Token does not exists, return error code *)
    err = CodeNotFound;
    MakeError err
  | Some correctOwner =>
    isCorrectOwner = builtin eq tokenOwner correctOwner;
    match isCorrectOwner with
    | False => throw
    | True =>
    (* Check if sender is tokenOwner *)
    isOwner = builtin eq _sender tokenOwner;
    getTokenApproval <- tokenApprovals[tokenId];
    isApproved = match getTokenApproval with
      | None => False
      | Some approvedAddress => 
        (* Check if sender is an approved address *)
        builtin eq _sender approvedAddress
      end;
    (* Check if sender is tokenOwner approvedForAll operator *)
    getOperatorStatus <- operatorApprovals[tokenOwner][_sender];
    isApprovedForAll = match getOperatorStatus with
      | None => False
      | Some val => val
      end;
    (* Check if sender is an authorised personnel *)
    isAuthorised = isApprovedOrOwner isOwner isApproved isApprovedForAll;
    match isAuthorised with
    | False =>
      (* Unauthorised transaction*)
      err = CodeNotAuthorised;
      MakeError err
    | True =>
      (* Change tokenOwner for that tokenId *)
      tokenOwners[tokenId] := to;
      (* Delete tokenApproval entry for that tokenId *)
      delete tokenApprovals[tokenId];
      e = {_eventname: "TransferSuccess"; from: _sender; recipient: to; token: tokenId};
      event e;
      (* Send dummy callback message.                                                *)
      (* Revert transition if invalid recipient contract. Ignore if external address *)
      msg = { _tag : "transferCallBack"; _recipient : to; _amount : Uint128 0 };
      msgs = one_msg msg;
      send msgs
    end
    end
  end
end

(* @dev: Approves another address the ability to transfer the given tokenId *)
(* There can only be one approvedSpender per token at a given time          *)
(* Absence of entry in tokenApproval indicates there is no approved address *)
(* param: to      - Address to be approved for the given tokenId            *)
(* param: tokenId - ID of the token to be approved                          *)
transition approve(to: ByStr20, tokenId: Uint256)
  (* Get tokenOwner address *)
  getTokenOwner <- tokenOwners[tokenId];
  match getTokenOwner with
  | None =>
    (* Token not found *)
    err = CodeNotFound;
    MakeError err
  | Some tokenOwner =>
    isOwner = builtin eq _sender tokenOwner;
    getApprovedForAll <- operatorApprovals[tokenOwner][_sender];
    isApprovedForAll = match getApprovedForAll with
      | Some val => val
      | None => False
      end;
    isAuthorised = orb isOwner isApprovedForAll;
    match isAuthorised with
    | True =>
      (* Add to tokenApproval mapping *)
      tokenApprovals[tokenId] := to;
      (* Emit event *)
      e = {_eventname: "ApproveSuccess"; from: _sender; approvedTo: to; token: tokenId};
      event e
    | False =>
      (* Unauthorised transaction *)
      err = CodeNotAuthorised;
      MakeError err
    end
  end
end

(* @dev: Sets or unsets the approval of a given operator           *)
(* @param: to       - Address to be set or unset as operator       *)
(* @param: approved - Status of approval to be set for the address *)
transition setApprovalForAll(to: ByStr20, approved: Bool)
  (* Checks if the _sender is approving himself *)
  isValidOperation = let check = builtin eq _sender to in negb check;
  (* Require the approval to not be the _sender *)
  match isValidOperation with
  | True =>
    (* Check if _sender has an existing record on the operatorApproval *)
    operatorApprovals[_sender][to] := approved;
    (* Stringify boolean value to be emitted in the event *)
    approvedStr = bool_to_string approved;
    e = {_eventname: "SetApprovalForAllSuccess"; by: _sender; recipient: to; status: approvedStr};
    event e
  | False =>
    err = CodeNotAuthorised;
    MakeError err
  end
end