scilla_version 0

import BoolUtils ListUtils

library RegistryLib

(* The PsudoStandardLib is a standard list of values that we have defined for *)
(* all scilla contracts see scilla/psuedo_standard.scillib for all the details *)

let zeroUint64 = Uint64 0
let zeroByStr20 = 0x0000000000000000000000000000000000000000
let zeroByStr32 = 
  0x0000000000000000000000000000000000000000000000000000000000000000
let nilByStr20 = Nil {ByStr20}
let nilMessage = Nil {Message}

let oneMsg =
  fun(msg: Message) =>
    Cons {Message} msg nilMessage

let eqByStr20 =
  fun(bs1: ByStr20) =>
  fun(bs2: ByStr20) =>
    builtin eq bs1 bs2

let listByStr20Contains = 
  fun(list: List ByStr20) =>
  fun(bs: ByStr20) =>
    let listMemByStr20 = @list_mem ByStr20 in
      listMemByStr20 eqByStr20 bs list

let listByStr20Excludes =
  fun(list: List ByStr20) =>
  fun(bs: ByStr20) =>
    let b = listByStr20Contains list bs in negb b

let listByStr20FilterOut = 
  fun(list: List ByStr20) =>
  fun(bs: ByStr20) =>
    let listByStr20Filter = @list_filter ByStr20 in
    let fn = fun(v: ByStr20) => 
      let b = builtin eq v bs in
       negb b in
      listByStr20Filter fn list

(* XAND Gate *)
let xandb =
  fun(b1: Bool) =>
  fun(b2: Bool) =>
    match b1 with
    | True =>
      match b2 with
      | True => True
      | False => False
      end
    | False =>
      match b2 with
      | True => False
      | False => True
      end
    end

    
(* Events defines a the "constructors" for all the types of events used *)
(* inside ZNS *)
let eAdminSet =
  fun(address: ByStr20) =>
  fun(isApproved: Bool) =>
    {_eventname: "AdminSet"; address: address; isApproved: isApproved}

let eApprovedFor =
  fun(user: ByStr20) =>
  fun(operator: ByStr20) =>
  fun(isApproved: Bool) =>
    {_eventname: "ApprovedFor"; user: user; operator: operator; isApproved: isApproved}

let eApproved =
  fun(address: ByStr20) =>
    {_eventname: "Approved"; address: address}

let eNewRegistrar =
  fun(address: ByStr20) =>
    {_eventname: "NewRegistrar"; address: address}

let eNewDomain = 
  fun(parent: ByStr32) =>
  fun(label: String) =>
    {_eventname: "NewDomain"; parent: parent; label: label}

let eConfigured = 
  fun(node: ByStr32) =>
  fun(owner: ByStr20) =>
  fun(resolver: ByStr20) =>
    {_eventname: "Configured"; node: node; owner: owner; resolver: resolver}
(* We use the Error event to alert the caller if something went wrong because *)
(* Scilla doesn't support throwing *)
let eError =
  fun(msg: String) =>
    {_eventname: "Error"; msg: msg }

    
(* Record represents an entry in the ZNS Tree *)
type Record = 
| Record of ByStr20 ByStr20

let recordMemberOwner =
  fun(maybeRecord: Option Record) =>
    match maybeRecord with
    | None => zeroByStr20
    | Some record =>
      match record with
      | Record owner resolver => owner
      end
    end

let parentLabelToNode = 
  fun(parent: ByStr32) =>
  fun(label: String) =>
    let labelHash = builtin sha256hash label in
    let nodeInput = builtin concat parent labelHash in
      builtin sha256hash nodeInput

let getIsOAO =
  fun(sender: ByStr20) =>
  fun(recordOwner: ByStr20) =>
  fun(maybeApproved: Option ByStr20) =>
  fun(maybeOperators: Option (List ByStr20)) =>
    let isOwner = builtin eq sender recordOwner in
    let isApproved = 
      match maybeApproved with
      | None => False
      | Some approved => builtin eq sender approved
      end in
    let isOperator = match maybeOperators with
    | None => False
    | Some operators => listByStr20Contains operators sender
    end in
    let b1 = orb isOwner isApproved in orb b1 isOperator

    
(* The 'contract' pragma tells scilla that the contract body starts *)
contract Registry 

(* Initial Parameters are specified on deploy, in the init.json and cannot be *)
(* changed throughout the life of the contract *)

(* initialOwner specifies the owner of the ZNS Root. See records field below. *)
(initialOwner: ByStr20, rootNode: ByStr32)

(* Mutable Fields represent the persistant state of a scilla contract and can *)
(* use the Initial Parameters durring contract instantiation *)

(* records is the representation of the ZNS record tree as a mapping of a *)
(* Node IDs (ByStr32) to ZNS records (Record) *)
(* We initialize the field, so the contracts' initialOwner owns the ZNS root *)
field records: Map ByStr32 Record = 
  let empty = Emp ByStr32 Record in 
  let rootRecord = Record initialOwner zeroByStr20 in
    builtin put empty rootNode rootRecord

field registrar: ByStr20 = zeroByStr20

(* approvals and operators are the internal representation of the ERC721 like *)
(* IAM system that ZNS uses *)
field approvals: Map ByStr32 ByStr20 = Emp ByStr32 ByStr20
field operators: Map ByStr20 (List ByStr20) = Emp ByStr20 (List ByStr20)
field admins: List ByStr20 = Cons {ByStr20} initialOwner nilByStr20

(* Adds or removes the given address as the contract admin based on isApproved flag *)
(* @ensures sender address is an admin *)
(* @param address the address to be added as admin *)
(* @param isApproved when true the address is added to admins, otherwise the address removed from admins *)
(* @emits adminSet with address and isApproved flag when the new admin was assigned or removed *)
(* @emits Error when sender address has no permission for this operation *)
transition setAdmin(address: ByStr20, isApproved: Bool)
  currentAdmins <- admins;

  isSenderAdmin = listByStr20Contains currentAdmins _sender;

  match isSenderAdmin with
  | True =>
    needsToChange = 
      let b = listByStr20Excludes currentAdmins address in xandb b isApproved;

    match needsToChange with
    | True =>
      newAdmins = match isApproved with
        | True => Cons {ByStr20} address currentAdmins
        | False => listByStr20FilterOut currentAdmins address
        end;

      admins := newAdmins;

      e = eAdminSet address isApproved;
      event e
    | _ => (* Q?: Should I put an event here *)
    end
  | False => 
    e = let m = "Sender not root node owner" in eError m;
    event e
  end
end

(* Allows the nodes' owner to approve of one address to freely configure a node *)
(* @ensures sender address is an owner of the node *)
(* @param node *)
(* @param address  *)
(* @emits Approved when the new approved address is set *)
(* @emits Error when sender address has no permission for this operation *)
transition approve(node: ByStr32, address: ByStr20) 
  maybeRecord <- records[node];
  recordOwner = recordMemberOwner maybeRecord;
  isSenderNodeOwner = builtin eq _sender recordOwner;

  match isSenderNodeOwner with
  | True =>
    maybeApproved <- approvals[node];

    currentlyApproved = match maybeApproved with
      | None => zeroByStr20
      | Some approved => approved
      end;

    needsToChange = let b = builtin eq currentlyApproved address in negb b;

    match needsToChange with
    | True =>
      approvals[node] := address;

      e = eApproved address;
      event e
    | _ => (* Q?: Should I put an event here *)
    end
  | False =>
    e = let m = "Sender not node owner" in eError m;
    event e
  end
end

(* Allows the sender account to approve or unapprove an address to act on it's behalf. *)
(* @param address  *)
(* @param isApproved when true the address is added to the list operators otherwise removed  *)
(* @emits ApprovedFor when the new approved address is added or removed from operators based on isApproved flag*)
transition approveFor(address: ByStr20, isApproved: Bool)
  maybeOperators <- operators[_sender];

  currentOperators = match maybeOperators with
    | None => nilByStr20
    | Some ops => ops
    end;

  (* f f-contains t-isApproved *)
  (* t f-contains f-isUnapproved *)
  (* t t-excludes t-isApproved *)
  (* f t-excludes f-isUnapproved *)

  needsToChange = let b = listByStr20Excludes currentOperators address in 
    xandb b isApproved;

  match needsToChange with
  | True =>
    newOperators = match isApproved with 
      | True => Cons {ByStr20} address currentOperators
      | False => listByStr20FilterOut currentOperators address
      end;

    operators[_sender] := newOperators;

    e = eApprovedFor _sender address isApproved;
    event e
  | _ => (* Q?: Should I put an event here *)
  end
end

(* Configures an existing node owner and resolver *)
(* @ensures sender address is an owner of the node or one of owner's operators or an approved address for the node *)
(* @param node address of the node to be configured*)
(* @param owner a new owner of the node *)
(* @param resolver a new resolver address of the node *)
(* @sends onConfigureSuccess to the sender if it was successfully changed *)
(* @sends onConfigureFailure to the sender if it failed to change *)
(* @emits Configured the operation was successful *)
(* @emits Error when sender address has no permission for this operation *)
transition configureNode(node: ByStr32, owner: ByStr20, resolver: ByStr20) 
  maybeRecord <- records[node];
  maybeApproved <- approvals[node];
  recordOwner = recordMemberOwner maybeRecord;
  maybeOperators <- operators[recordOwner];

  isSenderOAO = getIsOAO _sender recordOwner maybeApproved maybeOperators;

  match isSenderOAO with
  | True =>
    newRecord = Record owner resolver;
    records[node] := newRecord;

    e = eConfigured node owner resolver;
    event e;

    msgs = let m = {_tag: "onConfigureSuccess"; node: node; owner: owner; 
                    _amount: Uint128 0; _recipient: _sender} 
      in oneMsg m;
    send msgs
  | False =>
    e = let m = "Sender not node owner, approved or operator" in eError m;
    event e;

    msgs = let m = {_tag: "onConfigureFailure"; node: node; owner: recordOwner; 
                    _amount: Uint128 0; _recipient: _sender} 
      in oneMsg m;
    send msgs
  end
end

(* Configures an existing node resolver *)
(* @ensures sender address is an owner of the node or one of owner's operators or an approved address for the node *)
(* @param node address of the node to be configured *)
(* @param resolver a new resolver address of the node *)
(* @emits Configured if the node's resolver was changed successfully*)
(* @emits Error when a sender address has no permission for this operation *)
transition configureResolver(node: ByStr32, resolver: ByStr20) 
  maybeRecord <- records[node];
  maybeApproved <- approvals[node];
  recordOwner = recordMemberOwner maybeRecord;
  maybeOperators <- operators[recordOwner];

  isSenderOAO = getIsOAO _sender recordOwner maybeApproved maybeOperators;

  match isSenderOAO with
  | True =>
    newRecord = Record recordOwner resolver;
    records[node] := newRecord;

    e = eConfigured node recordOwner resolver;
    event e
  | False =>
    e = let m = "Sender not node owner, approved or operator" in eError m;
    event e
  end
end

(* Transfer an existing node to an owner *)
(* @ensures sender address is an owner of the node or one of node's owner operators or an approved address of this node *)
(* @param node address of the node to be configured *)
(* @param owner a new owner of the node *)
(* @sends onTransferSuccess to the sender if it was successfully changed *)
(* @sends onTransferFailure to the sender if it failed to change *)
(* @emits Configured if the node's owner was changed successfully*)
(* @emits Error when a sender address has no permission for this operation *)
transition transfer(node: ByStr32, owner: ByStr20)
  maybeRecord <- records[node];
  maybeApproved <- approvals[node];
  recordOwner = recordMemberOwner maybeRecord;
  maybeOperators <- operators[recordOwner];

  isSenderOAO = getIsOAO _sender recordOwner maybeApproved maybeOperators;

  match isSenderOAO with
  | True =>
    delete approvals[node];
    newRecord = Record owner zeroByStr20;
    records[node] := newRecord;

    e = eConfigured node owner zeroByStr20;
    event e;

    msgs = let m = {_tag: "onTransferSuccess"; node: node; owner: owner; 
                    _amount: Uint128 0; _recipient: _sender} 
      in oneMsg m;
    send msgs
  | False =>
    e = let m = "Sender not node owner, approved or operator" in eError m;
    event e;
    
    msgs = let m = {_tag: "onTransferFailure"; node: node; owner: owner; 
                    _amount: Uint128 0; _recipient: _sender} 
      in oneMsg m;
    send msgs
  end
end

(* Transfer a subnode to an account. This is the only way to create a new node. `assign` uses the same mechanics as `transfer` *)
(* @ensures sender address is an owner of the parent node or one of parent node's owner operators or an approved address of parent node *)
(* @param parent parent node address *)
(* @param label a name of the subnode (subdomain) to be assigned *)
(* @param owner an owner address of the subnode *)
(* @sends onAssignSuccess to the sender if it was successfully changed *)
(* @sends onAssignFailure to the sender if it failed to change *)
(* @emits Configured if the node's owner was changed successfully*)
(* @emits NewDomain when the target node(domain) didn't exist before and was made *)
(* @emits Error when a sender address has no permission for this operation *)
transition assign(parent: ByStr32, label: String, owner: ByStr20)
  maybeRecord <- records[parent];
  maybeApproved <- approvals[parent];
  recordOwner = recordMemberOwner maybeRecord;
  maybeOperators <- operators[recordOwner];

  isSenderOAO = getIsOAO _sender recordOwner maybeApproved maybeOperators;

  match isSenderOAO with
  | True =>
    node = parentLabelToNode parent label;

    recordExists <- exists records[node];
    match recordExists with
    | False =>
      e = eNewDomain parent label;
      event e
    | _ => 
    end;

    delete approvals[node];
    newRecord = Record owner zeroByStr20;
    records[node] := newRecord;

    e = eConfigured node owner zeroByStr20;
    event e;

    msgs = let m = {_tag: "onAssignSuccess"; parent: parent; label: label; 
                    owner: owner; _amount: Uint128 0; _recipient: _sender} 
      in oneMsg m;
    send msgs
  | False =>
    e = let m = "Sender not parent owner, approved or operator" in eError m;
    event e;

    msgs = let m = {_tag: "onAssignFailure"; parent: parent; label: label; 
                    owner: recordOwner; _amount: Uint128 0; _recipient: _sender} 
      in oneMsg m;
    send msgs
  end
end

(* Transfer an unowned subnode to an account. *)
(* @ensures a node is not owned by anyone or owned by registrar *)
(* @ensures sender address is an admin or a registrar *)
(* @param parent parent node address *)
(* @param label a name of the subnode (subdomain) to be assigned *)
(* @param owner a new owner address of the subnode *)
(* @emits NewDomain when node(domain) was assigned to the new owner *)
(* @emits Configured if the node's owner was changed successfully*)
(* @emits Error when a sender address has no permission for this operation *)
transition bestow(label: String, owner: ByStr20, resolver: ByStr20)
  currentAdmins <- admins;
  node = parentLabelToNode rootNode label;
  recordExists <- exists records[node];
  maybeRecord <- records[node];
  currentRegistrar <- registrar;

  isOk =
    let isSenderAdmin = listByStr20Contains currentAdmins _sender in
    let isSenderRegistrar = builtin eq currentRegistrar _sender in
    let isOkSender = orb isSenderRegistrar isSenderAdmin in
    let recordOwner = recordMemberOwner maybeRecord in
    let recordIsUnowned = builtin eq recordOwner zeroByStr20 in
    let recordIsOwnedByRegistrar = builtin eq recordOwner currentRegistrar in
    let isRegistrarSenderAndOwned = andb recordIsOwnedByRegistrar isSenderRegistrar in
    let isOkRecordOwner = orb recordIsUnowned isRegistrarSenderAndOwned in
      andb isOkSender isOkRecordOwner;

  match isOk with
  | True =>
    match recordExists with
    | False =>
      e = eNewDomain rootNode label;
      event e
    | _ => 
    end;

    (* delete approvals[node]; *)
    newRecord = Record owner resolver;
    records[node] := newRecord;

    e = eConfigured node owner resolver;
    event e
  | False =>
    e = let m = "Sender admin" in eError m;
    event e
  end
end

(* Sets a new registrar for the registry *)
(* @ensures the sender address is an admin *)
(* @param address the new registrar address *)
(* @emits NewRegistrar when the registrar was reassigned successfully *)
transition setRegistrar(address: ByStr20)
  currentAdmins <- admins;

  isOk = listByStr20Contains currentAdmins _sender;

  match isOk with
  | True => 
    e = eNewRegistrar address;
    event e;
    registrar := address
  | _ => 
  end
end

(* Registers an new domain throw the registrar of the contract *)
(* @param parent a parent address of the domain *)
(* @param label the new domain name to be registered *)
(* @ensures the new domain is not owned by anyone *)
(* @ensures the new domain has no approved address *)
(* @accepts the payment for the domain *)
(* @sends register to the current registrar with the sent amount *)
transition register(parent: ByStr32, label: String)
  node = parentLabelToNode parent label;
  maybeRecord <- records[node];
  maybeApproved <- approvals[node];
  recordOwner = recordMemberOwner maybeRecord;
  approved =
    match maybeApproved with
    | None => zeroByStr20
    | Some approved => approved
    end;
  currentRegistrar <- registrar;

  isOk =
    let isRecordUnowned = builtin eq recordOwner zeroByStr20 in
    let isUnapproved = builtin eq approved zeroByStr20 in
      andb isRecordUnowned isUnapproved;

  match isOk with 
  | True =>
    accept;
    msgs = 
      let m = {_tag: "register"; _amount: _amount; _recipient: currentRegistrar;
               origin: _sender; node: node; parent: parent; label: label} in
        oneMsg m;
    send msgs
  | False =>
  end
end

(* Callback method expected to be called by resolver when its configuration is changed *)
(* @param node that has its resolver configured *)
(* @ensures the node still has the _sender as its resolver *)
(* @emits Configured that can be used by 3rd parties to monitor changes in resolvers configuration all over the registry *)
transition onResolverConfigured(node: ByStr32)
  maybeRecord <- records[node];
  match maybeRecord with
  | None =>
  | Some record =>
    match record with 
    | Record owner resolver =>
      isOk = builtin eq resolver _sender;
      match isOk with
      | True =>
        e = eConfigured node owner resolver;
        event e
      | False =>
      end
    end
  end
end

