scilla_version 0

import BoolUtils ListUtils

library HoldingLib

let true = True
let nilMessage = Nil {Message}

let oneMsg =
  fun(msg: Message) =>
    Cons {Message} msg nilMessage

let eAdminSet =
  fun(address: ByStr20) =>
  fun(isApproved: Bool) =>
    {_eventname: "AdminSet"; address: address; isApproved: isApproved}

let eError = {_eventname: "Error"}

contract Admin

(initialAdmin: ByStr20, registry: ByStr20)

field admins: Map ByStr20 Bool = 
  let empty = Emp ByStr20 Bool in
    builtin put empty initialAdmin true

transition setAdmin(address: ByStr20, isApproved: Bool)
  maybeAdmin <- admins[_sender];

  isSenderAdmin = 
    match maybeAdmin with
    | Some approval => approval
    | None => False
    end;

  match isSenderAdmin with
  | True =>
    admins[address] := isApproved;

    e = eAdminSet address isApproved;
    event e
  | False =>
    event eError
  end
end

transition set(address: ByStr20, key: String, value: String)
  maybeAdmin <- admins[_sender];

  isSenderAdmin = 
    match maybeAdmin with
    | Some isAdmin => isAdmin
    | None => False
    end;

  match isSenderAdmin with
  | True =>
    msgs = 
      let m = {_tag: "set"; _recipient: address; _amount: Uint128 0; 
               key: key; value: value} in 
      oneMsg m;
    send msgs
  | False =>
    event eError
  end
end

transition unset(address: ByStr20, key: String)
  maybeAdmin <- admins[_sender];

  isSenderAdmin = 
    match maybeAdmin with
    | Some isAdmin => isAdmin
    | None => False
    end;

  match isSenderAdmin with
  | True =>
    msgs = 
      let m = {_tag: "unset"; _recipient: address; _amount: Uint128 0; 
               key: key} in 
      oneMsg m;
    send msgs
  | False =>
    event eError
  end
end

transition setOwner(address: ByStr20, owner: ByStr20)
  maybeAdmin <- admins[_sender];

  isSenderAdmin = 
    match maybeAdmin with
    | Some isAdmin => isAdmin
    | None => False
    end;

  match isSenderAdmin with
  | True =>
    msgs = 
      let m = {_tag: "setOwner"; _recipient: address; _amount: Uint128 0; 
               owner: owner} in 
      oneMsg m;
    send msgs
  | False =>
    event eError
  end
end

transition configureNode(node: ByStr32, owner: ByStr20, resolver: ByStr20)
  maybeAdmin <- admins[_sender];

  isSenderAdmin = 
    match maybeAdmin with
    | Some isAdmin => isAdmin
    | None => False
    end;

  match isSenderAdmin with
  | True =>
    msgs = 
      let m = {_tag: "configureNode"; _recipient: registry; _amount: Uint128 0; 
               node: node; owner: owner; resolver: resolver} in 
      oneMsg m;
    send msgs
  | False =>
    event eError
  end
end

transition configureResolver(node: ByStr32, resolver: ByStr20)
  maybeAdmin <- admins[_sender];

  isSenderAdmin = 
    match maybeAdmin with
    | Some isAdmin => isAdmin
    | None => False
    end;

  match isSenderAdmin with
  | True =>
    msgs = 
      let m = {_tag: "configureResolver"; _recipient: registry; _amount: Uint128 0; 
               node: node; resolver: resolver} in 
      oneMsg m;
    send msgs
  | False =>
    event eError
  end
end

transition transfer(node: ByStr32, owner: ByStr20)
  maybeAdmin <- admins[_sender];

  isSenderAdmin = 
    match maybeAdmin with
    | Some isAdmin => isAdmin
    | None => False
    end;

  match isSenderAdmin with
  | True =>
    msgs = 
      let m = {_tag: "configureResolver"; _recipient: registry; _amount: Uint128 0; 
               node: node; owner: owner} in 
      oneMsg m;
    send msgs
  | False =>
    event eError
  end
end
