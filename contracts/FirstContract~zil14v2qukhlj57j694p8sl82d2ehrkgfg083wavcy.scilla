scilla_version 0

(* My First contract *)

import ListUtils

library First

let one_msg =
  fun (msg: Message) =>
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg


let not_owner_code = Int32 1
let set_hello_code = Int32 2


contract First
(owner: ByStr20)

field welcome_msg : String = ""

transition setHello (msg : String)
  is_owner = builtin eq owner _sender;
  match is_owner with
  | False =>
    e = {_eventname : "setHello()"; code : not_owner_code};
    event e
  | True =>
    welcome_msg := msg;
    e = {_eventname : "setHello()"; code : set_hello_code};
    event e
  end
end


transition getHello ()
    r <- welcome_msg;
    e = {_eventname: "getHello()"; msg: r};
    event e
end

transition sendMoney(whom : ByStr20, amount : Uint128)
    is_owner = builtin eq owner _sender;
    match is_owner with
    | False =>
        e = {_eventname : "sendMoney()"; code : not_owner_code};
        event e
    | True =>
        msg = 
        { 
            _tag : "sendMoney"; 
            _recipient : whom; 
            _amount : amount
        };
        msgs = one_msg msg;
        send msgs
    end
end

transition contrAddr()
  msg1 = {_eventname : "ContractAddress"; addr : _this_address };
  event msg1
end
